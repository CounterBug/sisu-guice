Description: Upgrade to CGLIB 3.0 and ASM 4.1 (depends on GUICE_719_simplify_jarjar_build_setup.patch)
Author: Stuart McCulloch <mcculls@gmail.com>
Last-Update: 2013-04-21

diff --git a/build.xml b/build.xml
index 7b6c900..a2869d6 100644
--- a/build.xml
+++ b/build.xml
@@ -237,13 +237,13 @@
       <arg value="-DNO_AOP" />
     </munge>
     <replace file="build/no_aop/common.xml" value="">
-      <replacetoken><![CDATA[<zipfileset src="${common.basedir}/lib/build/asm-3.3.1.jar"/>]]></replacetoken>
+      <replacetoken><![CDATA[<zipfileset src="${common.basedir}/lib/build/asm-4.1.jar"/>]]></replacetoken>
     </replace>
     <replace file="build/no_aop/common.xml" value="">
-      <replacetoken><![CDATA[<zipfileset src="${common.basedir}/lib/build/cglib-2.2.2.jar"/>]]></replacetoken>
+      <replacetoken><![CDATA[<zipfileset src="${common.basedir}/lib/build/cglib-3.0.jar"/>]]></replacetoken>
     </replace>
     <replace file="build/no_aop/common.xml" value="">
-      <replacetoken><![CDATA[<zipfileset src="${common.basedir}/lib/build/cglib-2.2.2.jar">
+      <replacetoken><![CDATA[<zipfileset src="${common.basedir}/lib/build/cglib-3.0.jar">
         <include name="LICENSE"/>
         <include name="NOTICE"/>
       </zipfileset>]]></replacetoken>
diff --git a/common.xml b/common.xml
index d6dbd19..1dbf758 100644
--- a/common.xml
+++ b/common.xml
@@ -131,6 +131,11 @@
         classpath="${common.basedir}/lib/build/jarjar-1.1.jar"/>
     <jarjar jarfile="${build.dir}/${ant.project.name}-${version}-tests.jar">
       <fileset dir="${build.dir}/test"/>
+      <!-- workaround for missing TraceClassVisitor in CGLIB 3.0 -->
+      <zap pattern="net.sf.cglib.core.DefaultGeneratorStrategy"/>
+      <rule pattern="net.sf.cglib.core.DefaultGeneratorStrategy"
+            result="com.google.inject.internal.CGLIBStrategy"/>
+      <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
       <rule pattern="net.sf.cglib.*" result="com.google.inject.internal.cglib.$@1"/>
       <rule pattern="net.sf.cglib.**.*" result="com.google.inject.internal.cglib.@1.$@2"/>
       <rule pattern="org.objectweb.asm.*" result="com.google.inject.internal.asm.$@1"/>
@@ -148,8 +153,13 @@
         classpath="${common.basedir}/lib/build/jarjar-1.1.jar"/>
     <jarjar jarfile="${build.dir}/${ant.project.name}-with-deps.jar">
       <fileset dir="${build.dir}/classes"/>
-      <zipfileset src="${common.basedir}/lib/build/cglib-2.2.2.jar"/>
-      <zipfileset src="${common.basedir}/lib/build/asm-3.3.1.jar"/>
+      <zipfileset src="${common.basedir}/lib/build/cglib-3.0.jar"/>
+      <zipfileset src="${common.basedir}/lib/build/asm-4.1.jar"/>
+      <!-- workaround for missing TraceClassVisitor in CGLIB 3.0 -->
+      <zap pattern="net.sf.cglib.core.DefaultGeneratorStrategy"/>
+      <rule pattern="net.sf.cglib.core.DefaultGeneratorStrategy"
+            result="com.google.inject.internal.CGLIBStrategy"/>
+      <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
       <rule pattern="net.sf.cglib.*" result="com.google.inject.internal.cglib.$@1"/>
       <rule pattern="net.sf.cglib.**.*" result="com.google.inject.internal.cglib.@1.$@2"/>
       <rule pattern="org.objectweb.asm.*" result="com.google.inject.internal.asm.$@1"/>
diff --git a/core/pom.xml b/core/pom.xml
index 627bb81..d159a71 100644
--- a/core/pom.xml
+++ b/core/pom.xml
@@ -37,9 +37,15 @@
       <version>11.0.2</version>
     </dependency>
     <dependency>
+      <groupId>org.ow2.asm</groupId>
+      <artifactId>asm</artifactId>
+      <version>4.1</version>
+      <optional>true</optional>
+    </dependency>
+    <dependency>
       <groupId>cglib</groupId>
       <artifactId>cglib</artifactId>
-      <version>2.2.2</version>
+      <version>3.0</version>
       <optional>true</optional>
     </dependency>
     <dependency>
@@ -222,6 +228,15 @@
                 <include>*:cglib</include>
               </includes>
               <rules>
+                <!-- workaround for missing TraceClassVisitor in CGLIB 3.0 -->
+                <zap>
+                  <pattern>net.sf.cglib.core.DefaultGeneratorStrategy</pattern>
+                </zap>
+                <rule>
+                  <pattern>net.sf.cglib.core.DefaultGeneratorStrategy</pattern>
+                  <result>com.google.inject.internal.CGLIBStrategy</result>
+                </rule>
+                <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
                 <rule>
                   <pattern>net.sf.cglib.*</pattern>
                   <result>com.google.inject.internal.cglib.$@1</result>
diff --git a/core/src/com/google/inject/internal/CGLIBStrategy.java b/core/src/com/google/inject/internal/CGLIBStrategy.java
new file mode 100644
index 0000000..d51e366
--- /dev/null
+++ b/core/src/com/google/inject/internal/CGLIBStrategy.java
@@ -0,0 +1,31 @@
+/**
+ * Copyright (C) 2013 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.inject.internal;
+
+/*if[AOP]*/
+// workaround for missing TraceClassVisitor in CGLIB 3.0 
+public final class CGLIBStrategy
+  implements net.sf.cglib.core.GeneratorStrategy {
+  public static final CGLIBStrategy INSTANCE = new CGLIBStrategy();
+  public byte[] generate(net.sf.cglib.core.ClassGenerator cg) throws Exception {
+    org.objectweb.asm.ClassWriter cw = new org.objectweb.asm.ClassWriter(
+        org.objectweb.asm.ClassWriter.COMPUTE_MAXS);
+    cg.generateClass(cw);
+    return cw.toByteArray();
+  }
+}
+/*end[AOP]*/
diff --git a/core/src/com/google/inject/internal/util/LineNumbers.java b/core/src/com/google/inject/internal/util/LineNumbers.java
index 227c81e..2e141b5 100644
--- a/core/src/com/google/inject/internal/util/LineNumbers.java
+++ b/core/src/com/google/inject/internal/util/LineNumbers.java
@@ -123,12 +123,16 @@ final class LineNumbers {
     end[NO_AOP]*/
   }  
 
-  private class LineNumberReader implements ClassVisitor, MethodVisitor, AnnotationVisitor {
+  private class LineNumberReader extends ClassVisitor {
 
     private int line = -1;
     private String pendingMethod;
     private String name;
 
+    LineNumberReader() {
+      super(Opcodes.ASM4);
+    }
+
     public void visit(int version, int access, String name, String signature,
         String superName, String[] interfaces) {
       this.name = name;
@@ -141,132 +145,33 @@ final class LineNumbers {
       }
       pendingMethod = name + desc;
       line = -1;
-      return this;
+      return new MethodVisitor(Opcodes.ASM4) {
+          @Override
+          public void visitLineNumber(int line, Label start) {
+            if (line < firstLine) {
+              firstLine = line;
+            }
+
+            LineNumberReader.this.line = line;
+            if (pendingMethod != null) {
+              lines.put(pendingMethod, line);
+              pendingMethod = null;
+            }
+          }
+
+          @Override
+          public void visitFieldInsn(int opcode, String owner, String name,
+              String desc) {
+            if (opcode == Opcodes.PUTFIELD && LineNumberReader.this.name.equals(owner)
+                && !lines.containsKey(name) && line != -1) {
+              lines.put(name, line);
+            }
+          }
+      };
     }
 
     public void visitSource(String source, String debug) {
       LineNumbers.this.source = source;
     }
-
-    public void visitLineNumber(int line, Label start) {
-      if (line < firstLine) {
-        firstLine = line;
-      }
-
-      this.line = line;
-      if (pendingMethod != null) {
-        lines.put(pendingMethod, line);
-        pendingMethod = null;
-      }
-    }
-
-    public void visitFieldInsn(int opcode, String owner, String name,
-        String desc) {
-      if (opcode == Opcodes.PUTFIELD && this.name.equals(owner)
-          && !lines.containsKey(name) && line != -1) {
-        lines.put(name, line);
-      }
-    }
-
-    public void visitEnd() {
-    }
-
-    public void visitInnerClass(String name, String outerName, String innerName,
-        int access) {
-    }
-
-    public void visitOuterClass(String owner, String name, String desc) {
-    }
-
-    public void visitAttribute(Attribute attr) {
-    }
-
-    public FieldVisitor visitField(int access, String name, String desc,
-        String signature, Object value) {
-      return null;
-    }
-
-    public AnnotationVisitor visitAnnotation(String desc, boolean visible) {
-      return this;
-    }
-
-    public AnnotationVisitor visitAnnotation(String name, String desc) {
-      return this;
-    }
-
-    public AnnotationVisitor visitAnnotationDefault() {
-      return this;
-    }
-
-    public AnnotationVisitor visitParameterAnnotation(int parameter,
-        String desc, boolean visible) {
-      return this;
-    }
-
-    public AnnotationVisitor visitArray(String name) {
-      return this;
-    }
-
-    public void visitEnum(String name, String desc, String value) {
-    }
-
-    public void visit(String name, Object value) {
-    }
-
-    public void visitCode() {
-    }
-
-    public void visitFrame(int type, int nLocal, Object[] local, int nStack,
-        Object[] stack) {
-    }
-
-    public void visitIincInsn(int var, int increment) {
-    }
-
-    public void visitInsn(int opcode) {
-    }
-
-    public void visitIntInsn(int opcode, int operand) {
-    }
-
-    public void visitJumpInsn(int opcode, Label label) {
-    }
-
-    public void visitLabel(Label label) {
-    }
-
-    public void visitLdcInsn(Object cst) {
-    }
-
-    public void visitLocalVariable(String name, String desc, String signature,
-        Label start, Label end, int index) {
-    }
-
-    public void visitLookupSwitchInsn(Label dflt, int[] keys, Label[] labels) {
-    }
-
-    public void visitMaxs(int maxStack, int maxLocals) {
-    }
-
-    public void visitMethodInsn(int opcode, String owner, String name,
-        String desc) {
-    }
-
-    public void visitMultiANewArrayInsn(String desc, int dims) {
-    }
-
-    public void visitTableSwitchInsn(int min, int max, Label dflt,
-        Label[] labels) {
-    }
-
-    public void visitTryCatchBlock(Label start, Label end, Label handler,
-        String type) {
-    }
-
-    public void visitTypeInsn(int opcode, String desc) {
-    }
-
-    public void visitVarInsn(int opcode, int var) {
-    }
   }
 }
diff --git a/extensions/pom.xml b/extensions/pom.xml
index 823c103..e53f2a3 100644
--- a/extensions/pom.xml
+++ b/extensions/pom.xml
@@ -100,7 +100,7 @@
         <dependency>
           <groupId>cglib</groupId>
           <artifactId>cglib</artifactId>
-          <version>2.2.2</version>
+          <version>3.0</version>
           <scope>test</scope>
         </dependency>
       </dependencies>
diff --git a/lib/build/asm-3.3.1.jar b/lib/build/asm-3.3.1.jar
deleted file mode 100644
index 349f0d4..0000000
Binary files a/lib/build/asm-3.3.1.jar and /dev/null differ
diff --git a/lib/build/asm-4.1.jar b/lib/build/asm-4.1.jar
new file mode 100644
index 0000000..4ede5c9
Binary files /dev/null and b/lib/build/asm-4.1.jar differ
diff --git a/lib/build/cglib-2.2.2.jar b/lib/build/cglib-2.2.2.jar
deleted file mode 100644
index 564b9f8..0000000
Binary files a/lib/build/cglib-2.2.2.jar and /dev/null differ
diff --git a/lib/build/cglib-3.0.jar b/lib/build/cglib-3.0.jar
new file mode 100644
index 0000000..c4199f3
Binary files /dev/null and b/lib/build/cglib-3.0.jar differ
