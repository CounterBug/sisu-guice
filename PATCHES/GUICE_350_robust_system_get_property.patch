Description: Wrap System.getProperty call in case security is enabled
Author: Stuart McCulloch <mcculls@gmail.com>
Bug-Google: http://code.google.com/p/google-guice/issues/detail?id=350
Last-Update: 2013-11-13

diff --git a/core/src/com/google/inject/internal/BytecodeGen.java b/core/src/com/google/inject/internal/BytecodeGen.java
index ad7764b..f0ebc0a 100644
--- a/core/src/com/google/inject/internal/BytecodeGen.java
+++ b/core/src/com/google/inject/internal/BytecodeGen.java
@@ -117,8 +117,7 @@ public final class BytecodeGen {
   end[NO_AOP]*/
 
   /** Use "-Dguice.custom.loader=false" to disable custom classloading. */
-  private static final boolean CUSTOM_LOADER_ENABLED
-      = Boolean.parseBoolean(System.getProperty("guice.custom.loader", "true"));
+  private static final boolean CUSTOM_LOADER_ENABLED;
 
   /**
    * Weak cache of bridge class loaders that make the Guice implementation
@@ -127,6 +126,14 @@ public final class BytecodeGen {
   private static final LoadingCache<ClassLoader, ClassLoader> CLASS_LOADER_CACHE;
 
   static {
+    boolean customLoaderEnabled;
+    try {
+      customLoaderEnabled = Boolean.parseBoolean(System.getProperty("guice.custom.loader", "true"));
+    } catch (Throwable e) {
+      customLoaderEnabled = false; // unlikely we'll also have permissions for custom loading
+    }
+    CUSTOM_LOADER_ENABLED = customLoaderEnabled;
+
     CacheBuilder<Object, Object> builder = CacheBuilder.newBuilder().weakKeys().weakValues();
     if (!CUSTOM_LOADER_ENABLED) {
       builder.maximumSize(0);
diff --git a/core/src/com/google/inject/internal/InternalFlags.java b/core/src/com/google/inject/internal/InternalFlags.java
index 2c4ed75..31d412d 100644
--- a/core/src/com/google/inject/internal/InternalFlags.java
+++ b/core/src/com/google/inject/internal/InternalFlags.java
@@ -7,6 +7,18 @@ import java.util.logging.Logger;
  */
 public class InternalFlags {
   private final static Logger logger = Logger.getLogger(InternalFlags.class.getName());
+
+  private static final IncludeStackTraceOption INCLUDE_STACK_TRACES;
+  static {
+    IncludeStackTraceOption includeStackTraces;
+    try {
+      includeStackTraces = parseIncludeStackTraceOption();
+    } catch (Throwable e) {
+      includeStackTraces = IncludeStackTraceOption.ONLY_FOR_DECLARING_SOURCE;
+    }
+    INCLUDE_STACK_TRACES = includeStackTraces;
+  }
+
   /**
    * The options for Guice stack trace collection.
    */
@@ -21,6 +33,10 @@ public class InternalFlags {
 
 
   public static IncludeStackTraceOption getIncludeStackTraceOption() {
+    return INCLUDE_STACK_TRACES;
+  }
+
+  private static IncludeStackTraceOption parseIncludeStackTraceOption() {
     String flag = System.getProperty("guice_include_stack_traces");
     try {
       return (flag == null || flag.length() == 0)
