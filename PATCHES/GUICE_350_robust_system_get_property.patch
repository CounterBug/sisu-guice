Description: Wrap System.getProperty call in case security is enabled
Author: Stuart McCulloch <mcculls@gmail.com>
Bug-Google: http://code.google.com/p/google-guice/issues/detail?id=350
Last-Update: 2013-10-06

diff --git a/core/src/com/google/inject/internal/BytecodeGen.java b/core/src/com/google/inject/internal/BytecodeGen.java
index ad7764b..f0ebc0a 100644
--- a/core/src/com/google/inject/internal/BytecodeGen.java
+++ b/core/src/com/google/inject/internal/BytecodeGen.java
@@ -117,8 +117,7 @@ public final class BytecodeGen {
   end[NO_AOP]*/
 
   /** Use "-Dguice.custom.loader=false" to disable custom classloading. */
-  private static final boolean CUSTOM_LOADER_ENABLED
-      = Boolean.parseBoolean(System.getProperty("guice.custom.loader", "true"));
+  private static final boolean CUSTOM_LOADER_ENABLED;
 
   /**
    * Weak cache of bridge class loaders that make the Guice implementation
@@ -127,6 +126,14 @@ public final class BytecodeGen {
   private static final LoadingCache<ClassLoader, ClassLoader> CLASS_LOADER_CACHE;
 
   static {
+    boolean customLoaderEnabled;
+    try {
+      customLoaderEnabled = Boolean.parseBoolean(System.getProperty("guice.custom.loader", "true"));
+    } catch (Throwable e) {
+      customLoaderEnabled = false; // unlikely we'll also have permissions for custom loading
+    }
+    CUSTOM_LOADER_ENABLED = customLoaderEnabled;
+
     CacheBuilder<Object, Object> builder = CacheBuilder.newBuilder().weakKeys().weakValues();
     if (!CUSTOM_LOADER_ENABLED) {
       builder.maximumSize(0);
diffdiff --git a/core/src/com/google/inject/internal/InternalFlags.java b/core/src/com/google/inject/internal/InternalFlags.
index 9458281..78d56ae 100644
--- a/core/src/com/google/inject/internal/InternalFlags.java
+++ b/core/src/com/google/inject/internal/InternalFlags.java
@@ -6,6 +6,18 @@ package com.google.inject.internal;
  */
 public class InternalFlags {
 
+  private static final IncludeStackTraceOption INCLUDE_STACK_TRACES;
+  static {
+    IncludeStackTraceOption includeStackTraces;
+    try {
+      includeStackTraces = IncludeStackTraceOption.valueOf(
+          System.getProperty("guice_include_stack_traces"));
+    } catch (Throwable e) {
+      includeStackTraces = IncludeStackTraceOption.ONLY_FOR_DECLARING_SOURCE;
+    }
+    INCLUDE_STACK_TRACES = includeStackTraces;
+  }
+
   /**
    * The options for Guice stack trace collection.
    */
@@ -20,14 +32,6 @@ public class InternalFlags {
 
 
   public static IncludeStackTraceOption getIncludeStackTraceOption() {
-    String propertyValue = System.getProperty(
-        "guice_include_stack_traces");
-    if (IncludeStackTraceOption.OFF.name().equals(propertyValue)) {
-        return IncludeStackTraceOption.OFF;
-    }
-    if (IncludeStackTraceOption.COMPLETE.name().equals(propertyValue)) {
-        return IncludeStackTraceOption.COMPLETE;
-    }
-    return IncludeStackTraceOption.ONLY_FOR_DECLARING_SOURCE;
+    return INCLUDE_STACK_TRACES;
   }
 }
