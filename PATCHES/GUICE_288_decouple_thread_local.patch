Description: Decouple the context ThreadLocal from the containing Injector/ClassLoader
Author: Stuart McCulloch <mcculls@gmail.com>
Bug-Google: http://code.google.com/p/google-guice/issues/detail?id=288
Last-Update: 2013-09-19

diff --git a/core/src/com/google/inject/internal/InjectorImpl.java b/core/src/com/google/inject/internal/InjectorImpl.java
index 6faab97..3c25b40 100644
--- a/core/src/com/google/inject/internal/InjectorImpl.java
+++ b/core/src/com/google/inject/internal/InjectorImpl.java
@@ -128,7 +128,7 @@ final class InjectorImpl implements Injector, Lookups {
     if (parent != null) {
       localContext = parent.localContext;
     } else {
-      localContext = new LocalContextThreadLocal();
+      localContext = new ThreadLocal<Object[]>();
     }
   }
 
@@ -1035,11 +1035,15 @@ final class InjectorImpl implements Injector, Lookups {
     return getProvider(type).get();
   }
 
-  final ThreadLocal<Object[]> localContext;
+  private final ThreadLocal<Object[]> localContext;
 
   /** Looks up thread local context. Creates (and removes) a new context if necessary. */
   <T> T callInContext(ContextualCallable<T> callable) throws ErrorsException {
     Object[] reference = localContext.get();
+    if (reference == null) {
+      reference = new Object[1];
+      localContext.set(reference);
+    }
     if (reference[0] == null) {
       reference[0] = new InternalContext();
       try {
@@ -1061,10 +1065,4 @@ final class InjectorImpl implements Injector, Lookups {
         .toString();
   }
 
-  private static final class LocalContextThreadLocal extends ThreadLocal<Object[]> {
-    @Override
-    protected Object[] initialValue() {
-      return new Object[1];
-    }
-  }
 }
